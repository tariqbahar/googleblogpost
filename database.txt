///////////////////////User id ///////////////////////////////////////////////////////////////////////////////////

const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    trim: true,
    minlength: 3,
    maxlength: 50
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
    trim: true
  },
  phone: {
    type: String,
    required: true,
    trim: true
  },
  password: {
    type: String,
    required: true,
    minlength: 6
  },
  role: {
    type: String,
    enum: ['user', 'admin'],
    default: 'user'
  }
}, {
  timestamps: true
});

// Hash password before saving
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();

  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (err) {
    next(err);
  }
});

// Method to compare password during login
userSchema.methods.comparePassword = function (candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

module.exports = mongoose.model('User', userSchema);

//////////////////////////////////////////comment schema and replay//////////////////////////////////////////////////////////////

const mongoose = require('mongoose');

const ReplySchema = new mongoose.Schema({
  userId: mongoose.Schema.Types.ObjectId,  // reference to User
  userName: String,
  message: String,
  timestamp: { type: Date, default: Date.now },
  likes: [{ userId: mongoose.Schema.Types.ObjectId }], // people who liked this reply
});

const CommentSchema = new mongoose.Schema({
  userId: mongoose.Schema.Types.ObjectId,
  userName: String,
  message: String,
  timestamp: { type: Date, default: Date.now },
  likes: [{ userId: mongoose.Schema.Types.ObjectId }], // like tracking
  replies: [ReplySchema], // nested replies
});
 { timestamps: true };

module.exports = mongoose.model('BlogPost', BlogPostSchema);


/////////////////////////////////////////////////////blogpost/////////////////////////////////////////////////////////
const mongoose = require('mongoose');

const BlogPostSchema = new mongoose.Schema({
  slug: {
    type: String,
    required: true,
    unique: true
  },
  frontmatter: {
    published: {
      type: Boolean,
      default: false
    },
    title: {
      type: String,
      required: true
    },
    description: String,
    image: String,
    date: {
      type: Date,
      required: true
    },
    category: String,
    author: String,
    featured: {
      type: Boolean,
      default: false
    },
    trending: {
      type: Boolean,
      default: false
    },
    post_of_the_week: {
      type: Boolean,
      default: false
    },
    authorImage: String,
    readingTime: String
  },
 // Likes
  likes: [{ userId: mongoose.Schema.Types.ObjectId }],

  // Views
  views: [{ userId: mongoose.Schema.Types.ObjectId, viewedAt: { type: Date, default: Date.now } }],

  // Comments
  comments: [CommentSchema],
},

  content: {
    type: String,
    required: true
  }
 {
  timestamps: true // adds createdAt and updatedAt fields
});

module.exports = mongoose.model('BlogPost', BlogPostSchema);

//////////////////////////////////auther /////////////////////////////////////////////////////////////////////////
const mongoose = require('mongoose');

const AuthorSchema = new mongoose.Schema({
  slug: {
    type: String,
    required: true,
    unique: true
  },
  frontmatter: {
    title: {
      type: String,
      required: true
    },
    subtitle: {
      type: String,
      required: true
    },
    image: {
      type: String,
      required: true
    }
  },
  content: {
    type: String,
    required: true
  }
}, {
  timestamps: true // optional: adds createdAt and updatedAt fields
});

module.exports = mongoose.model('Author', AuthorSchema);


